function ray_for_pixel(camera, px, py)
  # the offset from the edge of the canvas to the pixel's center
  xoffset ← (px + 0.5) * camera.pixel_size
  yoffset ← (py + 0.5) * camera.pixel_size

  # the untransformed coordinates of the pixel in world space.
  # (remember that the camera looks toward -z, so +x is to the *left*.)
  world_x ← camera.half_width - xoffset
  world_y ← camera.half_height - yoffset

  # using the camera matrix, transform the canvas point and the origin,
  # and then compute the ray's direction vector.
  # (remember that the canvas is at z=-1)
  pixel ← inverse(camera.transform) * point(world_x, world_y, -1)
  origin ← inverse(camera.transform) * point(0, 0, 0)
  direction ← normalize(pixel - origin)

  return ray(origin, direction)
end function
