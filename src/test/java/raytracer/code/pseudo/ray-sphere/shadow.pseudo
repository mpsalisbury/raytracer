# start the ray at z = -5
ray_origin ← point(0, 0, -5)

# put the wall at z = 10
wall_z ← 10

wall_size ← 7.0

canvas_pixels ← 100

pixel_size ← wall_size / canvas_pixels

half ← wall_size / 2

canvas ← canvas(canvas_pixels, canvas_pixels)
color  ← color(1, 0, 0) # red
shape  ← sphere()

# for each row of pixels in the canvas
for y ← 0 to canvas_pixels - 1

  # compute the world y coordinate (top = +half, bottom = -half)
  world_y ← half - pixel_size * y

  # for each pixel in the row
  for x ← 0 to canvas_pixels - 1

    # compute the world x coordinate (left = -half, right = half)
    world_x ← -half + pixel_size * x

    # describe the point on the wall that the ray will target
    position ← point(world_x, world_y, wall_z)

    r ← ray(ray_origin, normalize(position - ray_origin))
    xs ← intersect(shape, r)

    if hit(xs) is defined
      write_pixel(canvas, x, y, color)
    end if

  end for

end for
